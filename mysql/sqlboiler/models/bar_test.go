// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBars(t *testing.T) {
	t.Parallel()

	query := Bars()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBarsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bar{}
	if err = randomize.Struct(seed, o, barDBTypes, true, barColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Bars().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBarsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bar{}
	if err = randomize.Struct(seed, o, barDBTypes, true, barColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Bars().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Bars().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBarsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bar{}
	if err = randomize.Struct(seed, o, barDBTypes, true, barColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BarSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Bars().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBarsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bar{}
	if err = randomize.Struct(seed, o, barDBTypes, true, barColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BarExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Bar exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BarExists to return true, but got false.")
	}
}

func testBarsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bar{}
	if err = randomize.Struct(seed, o, barDBTypes, true, barColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	barFound, err := FindBar(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if barFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBarsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bar{}
	if err = randomize.Struct(seed, o, barDBTypes, true, barColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Bars().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBarsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bar{}
	if err = randomize.Struct(seed, o, barDBTypes, true, barColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Bars().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBarsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	barOne := &Bar{}
	barTwo := &Bar{}
	if err = randomize.Struct(seed, barOne, barDBTypes, false, barColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}
	if err = randomize.Struct(seed, barTwo, barDBTypes, false, barColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = barOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = barTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Bars().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBarsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	barOne := &Bar{}
	barTwo := &Bar{}
	if err = randomize.Struct(seed, barOne, barDBTypes, false, barColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}
	if err = randomize.Struct(seed, barTwo, barDBTypes, false, barColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = barOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = barTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bars().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func barBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Bar) error {
	*o = Bar{}
	return nil
}

func barAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Bar) error {
	*o = Bar{}
	return nil
}

func barAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Bar) error {
	*o = Bar{}
	return nil
}

func barBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Bar) error {
	*o = Bar{}
	return nil
}

func barAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Bar) error {
	*o = Bar{}
	return nil
}

func barBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Bar) error {
	*o = Bar{}
	return nil
}

func barAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Bar) error {
	*o = Bar{}
	return nil
}

func barBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Bar) error {
	*o = Bar{}
	return nil
}

func barAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Bar) error {
	*o = Bar{}
	return nil
}

func testBarsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Bar{}
	o := &Bar{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, barDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Bar object: %s", err)
	}

	AddBarHook(boil.BeforeInsertHook, barBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	barBeforeInsertHooks = []BarHook{}

	AddBarHook(boil.AfterInsertHook, barAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	barAfterInsertHooks = []BarHook{}

	AddBarHook(boil.AfterSelectHook, barAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	barAfterSelectHooks = []BarHook{}

	AddBarHook(boil.BeforeUpdateHook, barBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	barBeforeUpdateHooks = []BarHook{}

	AddBarHook(boil.AfterUpdateHook, barAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	barAfterUpdateHooks = []BarHook{}

	AddBarHook(boil.BeforeDeleteHook, barBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	barBeforeDeleteHooks = []BarHook{}

	AddBarHook(boil.AfterDeleteHook, barAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	barAfterDeleteHooks = []BarHook{}

	AddBarHook(boil.BeforeUpsertHook, barBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	barBeforeUpsertHooks = []BarHook{}

	AddBarHook(boil.AfterUpsertHook, barAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	barAfterUpsertHooks = []BarHook{}
}

func testBarsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bar{}
	if err = randomize.Struct(seed, o, barDBTypes, true, barColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bars().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBarsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bar{}
	if err = randomize.Struct(seed, o, barDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(barColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Bars().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBarToManyBarChildren(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bar
	var b, c BarChild

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, barDBTypes, true, barColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, barChildDBTypes, false, barChildColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, barChildDBTypes, false, barChildColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.BarID = a.ID
	c.BarID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	barChild, err := a.BarChildren().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range barChild {
		if v.BarID == b.BarID {
			bFound = true
		}
		if v.BarID == c.BarID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BarSlice{&a}
	if err = a.L.LoadBarChildren(ctx, tx, false, (*[]*Bar)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BarChildren); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.BarChildren = nil
	if err = a.L.LoadBarChildren(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BarChildren); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", barChild)
	}
}

func testBarToManyBarOneChildren(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bar
	var b, c BarOneChild

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, barDBTypes, true, barColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, barOneChildDBTypes, false, barOneChildColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, barOneChildDBTypes, false, barOneChildColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.BarID = a.ID
	c.BarID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	barOneChild, err := a.BarOneChildren().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range barOneChild {
		if v.BarID == b.BarID {
			bFound = true
		}
		if v.BarID == c.BarID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BarSlice{&a}
	if err = a.L.LoadBarOneChildren(ctx, tx, false, (*[]*Bar)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BarOneChildren); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.BarOneChildren = nil
	if err = a.L.LoadBarOneChildren(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BarOneChildren); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", barOneChild)
	}
}

func testBarToManyAddOpBarChildren(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bar
	var b, c, d, e BarChild

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, barDBTypes, false, strmangle.SetComplement(barPrimaryKeyColumns, barColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*BarChild{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, barChildDBTypes, false, strmangle.SetComplement(barChildPrimaryKeyColumns, barChildColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*BarChild{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBarChildren(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.BarID {
			t.Error("foreign key was wrong value", a.ID, first.BarID)
		}
		if a.ID != second.BarID {
			t.Error("foreign key was wrong value", a.ID, second.BarID)
		}

		if first.R.Bar != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Bar != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.BarChildren[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.BarChildren[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.BarChildren().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testBarToManyAddOpBarOneChildren(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bar
	var b, c, d, e BarOneChild

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, barDBTypes, false, strmangle.SetComplement(barPrimaryKeyColumns, barColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*BarOneChild{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, barOneChildDBTypes, false, strmangle.SetComplement(barOneChildPrimaryKeyColumns, barOneChildColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*BarOneChild{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBarOneChildren(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.BarID {
			t.Error("foreign key was wrong value", a.ID, first.BarID)
		}
		if a.ID != second.BarID {
			t.Error("foreign key was wrong value", a.ID, second.BarID)
		}

		if first.R.Bar != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Bar != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.BarOneChildren[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.BarOneChildren[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.BarOneChildren().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testBarToOneFooUsingFoo(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Bar
	var foreign Foo

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, barDBTypes, false, barColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, fooDBTypes, false, fooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FooID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Foo().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BarSlice{&local}
	if err = local.L.LoadFoo(ctx, tx, false, (*[]*Bar)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Foo == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Foo = nil
	if err = local.L.LoadFoo(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Foo == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBarToOneSetOpFooUsingFoo(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bar
	var b, c Foo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, barDBTypes, false, strmangle.SetComplement(barPrimaryKeyColumns, barColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, fooDBTypes, false, strmangle.SetComplement(fooPrimaryKeyColumns, fooColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, fooDBTypes, false, strmangle.SetComplement(fooPrimaryKeyColumns, fooColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Foo{&b, &c} {
		err = a.SetFoo(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Foo != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Bars[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FooID != x.ID {
			t.Error("foreign key was wrong value", a.FooID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FooID))
		reflect.Indirect(reflect.ValueOf(&a.FooID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FooID != x.ID {
			t.Error("foreign key was wrong value", a.FooID, x.ID)
		}
	}
}

func testBarsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bar{}
	if err = randomize.Struct(seed, o, barDBTypes, true, barColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBarsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bar{}
	if err = randomize.Struct(seed, o, barDBTypes, true, barColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BarSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBarsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bar{}
	if err = randomize.Struct(seed, o, barDBTypes, true, barColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Bars().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	barDBTypes = map[string]string{`FooID`: `int`, `ID`: `int`, `Name`: `varchar`}
	_          = bytes.MinRead
)

func testBarsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(barPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(barColumns) == len(barPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Bar{}
	if err = randomize.Struct(seed, o, barDBTypes, true, barColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bars().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, barDBTypes, true, barPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBarsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(barColumns) == len(barPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Bar{}
	if err = randomize.Struct(seed, o, barDBTypes, true, barColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bars().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, barDBTypes, true, barPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(barColumns, barPrimaryKeyColumns) {
		fields = barColumns
	} else {
		fields = strmangle.SetComplement(
			barColumns,
			barPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BarSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBarsUpsert(t *testing.T) {
	t.Parallel()

	if len(barColumns) == len(barPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLBarUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Bar{}
	if err = randomize.Struct(seed, &o, barDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Bar: %s", err)
	}

	count, err := Bars().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, barDBTypes, false, barPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Bar: %s", err)
	}

	count, err = Bars().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
