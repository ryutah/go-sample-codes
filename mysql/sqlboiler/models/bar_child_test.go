// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBarChildren(t *testing.T) {
	t.Parallel()

	query := BarChildren()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBarChildrenDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BarChild{}
	if err = randomize.Struct(seed, o, barChildDBTypes, true, barChildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BarChildren().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBarChildrenQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BarChild{}
	if err = randomize.Struct(seed, o, barChildDBTypes, true, barChildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BarChildren().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BarChildren().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBarChildrenSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BarChild{}
	if err = randomize.Struct(seed, o, barChildDBTypes, true, barChildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BarChildSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BarChildren().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBarChildrenExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BarChild{}
	if err = randomize.Struct(seed, o, barChildDBTypes, true, barChildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BarChildExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if BarChild exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BarChildExists to return true, but got false.")
	}
}

func testBarChildrenFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BarChild{}
	if err = randomize.Struct(seed, o, barChildDBTypes, true, barChildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	barChildFound, err := FindBarChild(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if barChildFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBarChildrenBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BarChild{}
	if err = randomize.Struct(seed, o, barChildDBTypes, true, barChildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BarChildren().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBarChildrenOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BarChild{}
	if err = randomize.Struct(seed, o, barChildDBTypes, true, barChildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BarChildren().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBarChildrenAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	barChildOne := &BarChild{}
	barChildTwo := &BarChild{}
	if err = randomize.Struct(seed, barChildOne, barChildDBTypes, false, barChildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}
	if err = randomize.Struct(seed, barChildTwo, barChildDBTypes, false, barChildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = barChildOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = barChildTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BarChildren().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBarChildrenCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	barChildOne := &BarChild{}
	barChildTwo := &BarChild{}
	if err = randomize.Struct(seed, barChildOne, barChildDBTypes, false, barChildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}
	if err = randomize.Struct(seed, barChildTwo, barChildDBTypes, false, barChildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = barChildOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = barChildTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BarChildren().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func barChildBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BarChild) error {
	*o = BarChild{}
	return nil
}

func barChildAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BarChild) error {
	*o = BarChild{}
	return nil
}

func barChildAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BarChild) error {
	*o = BarChild{}
	return nil
}

func barChildBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BarChild) error {
	*o = BarChild{}
	return nil
}

func barChildAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BarChild) error {
	*o = BarChild{}
	return nil
}

func barChildBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BarChild) error {
	*o = BarChild{}
	return nil
}

func barChildAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BarChild) error {
	*o = BarChild{}
	return nil
}

func barChildBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BarChild) error {
	*o = BarChild{}
	return nil
}

func barChildAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BarChild) error {
	*o = BarChild{}
	return nil
}

func testBarChildrenHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BarChild{}
	o := &BarChild{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, barChildDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BarChild object: %s", err)
	}

	AddBarChildHook(boil.BeforeInsertHook, barChildBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	barChildBeforeInsertHooks = []BarChildHook{}

	AddBarChildHook(boil.AfterInsertHook, barChildAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	barChildAfterInsertHooks = []BarChildHook{}

	AddBarChildHook(boil.AfterSelectHook, barChildAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	barChildAfterSelectHooks = []BarChildHook{}

	AddBarChildHook(boil.BeforeUpdateHook, barChildBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	barChildBeforeUpdateHooks = []BarChildHook{}

	AddBarChildHook(boil.AfterUpdateHook, barChildAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	barChildAfterUpdateHooks = []BarChildHook{}

	AddBarChildHook(boil.BeforeDeleteHook, barChildBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	barChildBeforeDeleteHooks = []BarChildHook{}

	AddBarChildHook(boil.AfterDeleteHook, barChildAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	barChildAfterDeleteHooks = []BarChildHook{}

	AddBarChildHook(boil.BeforeUpsertHook, barChildBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	barChildBeforeUpsertHooks = []BarChildHook{}

	AddBarChildHook(boil.AfterUpsertHook, barChildAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	barChildAfterUpsertHooks = []BarChildHook{}
}

func testBarChildrenInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BarChild{}
	if err = randomize.Struct(seed, o, barChildDBTypes, true, barChildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BarChildren().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBarChildrenInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BarChild{}
	if err = randomize.Struct(seed, o, barChildDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(barChildColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BarChildren().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBarChildToOneBarUsingBar(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BarChild
	var foreign Bar

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, barChildDBTypes, false, barChildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, barDBTypes, false, barColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bar struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BarID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Bar().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BarChildSlice{&local}
	if err = local.L.LoadBar(ctx, tx, false, (*[]*BarChild)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Bar == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Bar = nil
	if err = local.L.LoadBar(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Bar == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBarChildToOneSetOpBarUsingBar(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BarChild
	var b, c Bar

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, barChildDBTypes, false, strmangle.SetComplement(barChildPrimaryKeyColumns, barChildColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, barDBTypes, false, strmangle.SetComplement(barPrimaryKeyColumns, barColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, barDBTypes, false, strmangle.SetComplement(barPrimaryKeyColumns, barColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Bar{&b, &c} {
		err = a.SetBar(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Bar != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BarChildren[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BarID != x.ID {
			t.Error("foreign key was wrong value", a.BarID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BarID))
		reflect.Indirect(reflect.ValueOf(&a.BarID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BarID != x.ID {
			t.Error("foreign key was wrong value", a.BarID, x.ID)
		}
	}
}

func testBarChildrenReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BarChild{}
	if err = randomize.Struct(seed, o, barChildDBTypes, true, barChildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBarChildrenReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BarChild{}
	if err = randomize.Struct(seed, o, barChildDBTypes, true, barChildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BarChildSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBarChildrenSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BarChild{}
	if err = randomize.Struct(seed, o, barChildDBTypes, true, barChildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BarChildren().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	barChildDBTypes = map[string]string{`BarID`: `int`, `ID`: `int`, `Name`: `varchar`}
	_               = bytes.MinRead
)

func testBarChildrenUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(barChildPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(barChildColumns) == len(barChildPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BarChild{}
	if err = randomize.Struct(seed, o, barChildDBTypes, true, barChildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BarChildren().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, barChildDBTypes, true, barChildPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBarChildrenSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(barChildColumns) == len(barChildPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BarChild{}
	if err = randomize.Struct(seed, o, barChildDBTypes, true, barChildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BarChildren().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, barChildDBTypes, true, barChildPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(barChildColumns, barChildPrimaryKeyColumns) {
		fields = barChildColumns
	} else {
		fields = strmangle.SetComplement(
			barChildColumns,
			barChildPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BarChildSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBarChildrenUpsert(t *testing.T) {
	t.Parallel()

	if len(barChildColumns) == len(barChildPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLBarChildUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BarChild{}
	if err = randomize.Struct(seed, &o, barChildDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BarChild: %s", err)
	}

	count, err := BarChildren().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, barChildDBTypes, false, barChildPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BarChild struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BarChild: %s", err)
	}

	count, err = BarChildren().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
