// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// FooChild is an object representing the database table.
type FooChild struct {
	ID    int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name  null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	FooID int         `boil:"foo_id" json:"foo_id" toml:"foo_id" yaml:"foo_id"`

	R *fooChildR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fooChildL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FooChildColumns = struct {
	ID    string
	Name  string
	FooID string
}{
	ID:    "id",
	Name:  "name",
	FooID: "foo_id",
}

// FooChildRels is where relationship names are stored.
var FooChildRels = struct {
	Foo string
}{
	Foo: "Foo",
}

// fooChildR is where relationships are stored.
type fooChildR struct {
	Foo *Foo
}

// NewStruct creates a new relationship struct
func (*fooChildR) NewStruct() *fooChildR {
	return &fooChildR{}
}

// fooChildL is where Load methods for each relationship are stored.
type fooChildL struct{}

var (
	fooChildColumns               = []string{"id", "name", "foo_id"}
	fooChildColumnsWithoutDefault = []string{"name", "foo_id"}
	fooChildColumnsWithDefault    = []string{"id"}
	fooChildPrimaryKeyColumns     = []string{"id"}
)

type (
	// FooChildSlice is an alias for a slice of pointers to FooChild.
	// This should generally be used opposed to []FooChild.
	FooChildSlice []*FooChild
	// FooChildHook is the signature for custom FooChild hook methods
	FooChildHook func(context.Context, boil.ContextExecutor, *FooChild) error

	fooChildQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fooChildType                 = reflect.TypeOf(&FooChild{})
	fooChildMapping              = queries.MakeStructMapping(fooChildType)
	fooChildPrimaryKeyMapping, _ = queries.BindMapping(fooChildType, fooChildMapping, fooChildPrimaryKeyColumns)
	fooChildInsertCacheMut       sync.RWMutex
	fooChildInsertCache          = make(map[string]insertCache)
	fooChildUpdateCacheMut       sync.RWMutex
	fooChildUpdateCache          = make(map[string]updateCache)
	fooChildUpsertCacheMut       sync.RWMutex
	fooChildUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var fooChildBeforeInsertHooks []FooChildHook
var fooChildBeforeUpdateHooks []FooChildHook
var fooChildBeforeDeleteHooks []FooChildHook
var fooChildBeforeUpsertHooks []FooChildHook

var fooChildAfterInsertHooks []FooChildHook
var fooChildAfterSelectHooks []FooChildHook
var fooChildAfterUpdateHooks []FooChildHook
var fooChildAfterDeleteHooks []FooChildHook
var fooChildAfterUpsertHooks []FooChildHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FooChild) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range fooChildBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FooChild) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range fooChildBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FooChild) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range fooChildBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FooChild) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range fooChildBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FooChild) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range fooChildAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FooChild) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range fooChildAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FooChild) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range fooChildAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FooChild) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range fooChildAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FooChild) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range fooChildAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFooChildHook registers your hook function for all future operations.
func AddFooChildHook(hookPoint boil.HookPoint, fooChildHook FooChildHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		fooChildBeforeInsertHooks = append(fooChildBeforeInsertHooks, fooChildHook)
	case boil.BeforeUpdateHook:
		fooChildBeforeUpdateHooks = append(fooChildBeforeUpdateHooks, fooChildHook)
	case boil.BeforeDeleteHook:
		fooChildBeforeDeleteHooks = append(fooChildBeforeDeleteHooks, fooChildHook)
	case boil.BeforeUpsertHook:
		fooChildBeforeUpsertHooks = append(fooChildBeforeUpsertHooks, fooChildHook)
	case boil.AfterInsertHook:
		fooChildAfterInsertHooks = append(fooChildAfterInsertHooks, fooChildHook)
	case boil.AfterSelectHook:
		fooChildAfterSelectHooks = append(fooChildAfterSelectHooks, fooChildHook)
	case boil.AfterUpdateHook:
		fooChildAfterUpdateHooks = append(fooChildAfterUpdateHooks, fooChildHook)
	case boil.AfterDeleteHook:
		fooChildAfterDeleteHooks = append(fooChildAfterDeleteHooks, fooChildHook)
	case boil.AfterUpsertHook:
		fooChildAfterUpsertHooks = append(fooChildAfterUpsertHooks, fooChildHook)
	}
}

// One returns a single fooChild record from the query.
func (q fooChildQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FooChild, error) {
	o := &FooChild{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for foo_child")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FooChild records from the query.
func (q fooChildQuery) All(ctx context.Context, exec boil.ContextExecutor) (FooChildSlice, error) {
	var o []*FooChild

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FooChild slice")
	}

	if len(fooChildAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FooChild records in the query.
func (q fooChildQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count foo_child rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fooChildQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if foo_child exists")
	}

	return count > 0, nil
}

// Foo pointed to by the foreign key.
func (o *FooChild) Foo(mods ...qm.QueryMod) fooQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.FooID),
	}

	queryMods = append(queryMods, mods...)

	query := Foos(queryMods...)
	queries.SetFrom(query.Query, "`foo`")

	return query
}

// LoadFoo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (fooChildL) LoadFoo(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFooChild interface{}, mods queries.Applicator) error {
	var slice []*FooChild
	var object *FooChild

	if singular {
		object = maybeFooChild.(*FooChild)
	} else {
		slice = *maybeFooChild.(*[]*FooChild)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fooChildR{}
		}
		args = append(args, object.FooID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fooChildR{}
			}

			for _, a := range args {
				if a == obj.FooID {
					continue Outer
				}
			}

			args = append(args, obj.FooID)

		}
	}

	query := NewQuery(qm.From(`foo`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Foo")
	}

	var resultSlice []*Foo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Foo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for foo")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for foo")
	}

	if len(fooChildAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Foo = foreign
		if foreign.R == nil {
			foreign.R = &fooR{}
		}
		foreign.R.FooChildren = append(foreign.R.FooChildren, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FooID == foreign.ID {
				local.R.Foo = foreign
				if foreign.R == nil {
					foreign.R = &fooR{}
				}
				foreign.R.FooChildren = append(foreign.R.FooChildren, local)
				break
			}
		}
	}

	return nil
}

// SetFoo of the fooChild to the related item.
// Sets o.R.Foo to related.
// Adds o to related.R.FooChildren.
func (o *FooChild) SetFoo(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Foo) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `foo_child` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"foo_id"}),
		strmangle.WhereClause("`", "`", 0, fooChildPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FooID = related.ID
	if o.R == nil {
		o.R = &fooChildR{
			Foo: related,
		}
	} else {
		o.R.Foo = related
	}

	if related.R == nil {
		related.R = &fooR{
			FooChildren: FooChildSlice{o},
		}
	} else {
		related.R.FooChildren = append(related.R.FooChildren, o)
	}

	return nil
}

// FooChildren retrieves all the records using an executor.
func FooChildren(mods ...qm.QueryMod) fooChildQuery {
	mods = append(mods, qm.From("`foo_child`"))
	return fooChildQuery{NewQuery(mods...)}
}

// FindFooChild retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFooChild(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*FooChild, error) {
	fooChildObj := &FooChild{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `foo_child` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, fooChildObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from foo_child")
	}

	return fooChildObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FooChild) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no foo_child provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fooChildColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fooChildInsertCacheMut.RLock()
	cache, cached := fooChildInsertCache[key]
	fooChildInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fooChildColumns,
			fooChildColumnsWithDefault,
			fooChildColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fooChildType, fooChildMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fooChildType, fooChildMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `foo_child` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `foo_child` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `foo_child` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, fooChildPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into foo_child")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == fooChildMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for foo_child")
	}

CacheNoHooks:
	if !cached {
		fooChildInsertCacheMut.Lock()
		fooChildInsertCache[key] = cache
		fooChildInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FooChild.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FooChild) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fooChildUpdateCacheMut.RLock()
	cache, cached := fooChildUpdateCache[key]
	fooChildUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fooChildColumns,
			fooChildPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update foo_child, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `foo_child` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, fooChildPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fooChildType, fooChildMapping, append(wl, fooChildPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update foo_child row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for foo_child")
	}

	if !cached {
		fooChildUpdateCacheMut.Lock()
		fooChildUpdateCache[key] = cache
		fooChildUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fooChildQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for foo_child")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for foo_child")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FooChildSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fooChildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `foo_child` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fooChildPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in fooChild slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all fooChild")
	}
	return rowsAff, nil
}

var mySQLFooChildUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FooChild) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no foo_child provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fooChildColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFooChildUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fooChildUpsertCacheMut.RLock()
	cache, cached := fooChildUpsertCache[key]
	fooChildUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fooChildColumns,
			fooChildColumnsWithDefault,
			fooChildColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			fooChildColumns,
			fooChildPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert foo_child, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "foo_child", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `foo_child` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(fooChildType, fooChildMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fooChildType, fooChildMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for foo_child")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == fooChildMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(fooChildType, fooChildMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for foo_child")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for foo_child")
	}

CacheNoHooks:
	if !cached {
		fooChildUpsertCacheMut.Lock()
		fooChildUpsertCache[key] = cache
		fooChildUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FooChild record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FooChild) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FooChild provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fooChildPrimaryKeyMapping)
	sql := "DELETE FROM `foo_child` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from foo_child")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for foo_child")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fooChildQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no fooChildQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from foo_child")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for foo_child")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FooChildSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FooChild slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(fooChildBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fooChildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `foo_child` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fooChildPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fooChild slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for foo_child")
	}

	if len(fooChildAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FooChild) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFooChild(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FooChildSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FooChildSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fooChildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `foo_child`.* FROM `foo_child` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fooChildPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FooChildSlice")
	}

	*o = slice

	return nil
}

// FooChildExists checks if the FooChild row exists.
func FooChildExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `foo_child` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if foo_child exists")
	}

	return exists, nil
}
